---
import { translations } from '../i18n/translations';
import LanguageSelector from '../components/LanguageSelector.astro';

type SupportedLanguages = keyof typeof translations;
const { lang = 'es' } = Astro.props;
const t = translations[lang as SupportedLanguages];
---

<nav class="nav-menu white-bg">
  <LanguageSelector currentLang={lang} />
  <ul>
    <li><a href="#inicio">{t['nav.home']}</a></li>
    <li><a href="#informacion">{t['nav.info']}</a></li>
    <li><a href="#rsvp">{t['nav.rsvp']}</a></li>
  </ul>
</nav>


<script>
  const nav = document.querySelector('.nav-menu');
  const sections = document.querySelectorAll('.section');
  let isScrolling = false;
  let currentSectionIndex = 0;
  let isMobile = window.innerWidth <= 768;
  let lastScrollTime = 0;

  // Función para inicializar la navegación correctamente
  function initializeNavigation() {
    if (nav) {
      // Hacer visible la navegación inmediatamente si estamos en modo #open
      if (window.location.hash === '#open') {
        nav.classList.add('sticky');
        nav.classList.add('visible');
      }
    }
    
    // Determinar la sección inicial
    updateCurrentSection();
    
    // Configurar gestos táctiles para móviles
    if (isMobile) {
      document.body.style.overscrollBehaviorY = 'contain';
      setupMobileSwipe();
    }
  }

  // Implementación directa de detección de swipe
  function setupMobileSwipe() {
    let touchStartY = 0;
    let touchEndY = 0;
    let touchStartTime = 0;
    
    document.addEventListener('touchstart', function(e) {
      touchStartY = e.touches[0].clientY;
      touchStartTime = Date.now();
    }, {passive: true});
    
    document.addEventListener('touchend', function(e) {
      // No procesar si ya estamos en una animación de scroll
      if (isScrolling) return;
      
      // Limitar la frecuencia de eventos
      const now = Date.now();
      if (now - lastScrollTime < 500) return;
      lastScrollTime = now;
      
      touchEndY = e.changedTouches[0].clientY;
      const touchDiff = touchStartY - touchEndY;
      const timeDiff = now - touchStartTime;
      
      // Solo procesar si el gesto fue rápido y significativo
      if (Math.abs(touchDiff) > 50 && timeDiff < 300) {
        const direction = touchDiff > 0 ? 1 : -1; // positivo = hacia abajo
        const nextIndex = currentSectionIndex + direction;
        
        if (nextIndex >= 0 && nextIndex < sections.length) {
          // Bloquear scroll durante la animación
          isScrolling = true;
          
          // Forzar scroll a la siguiente sección
          const targetSection = sections[nextIndex];
          const targetPosition = targetSection.offsetTop;
          
          // Usar scrollTo sin comportamiento suave para mayor compatibilidad
          window.scrollTo(0, targetPosition);
          
          // Actualizar índice
          currentSectionIndex = nextIndex;
          
          // Desbloquear después de un tiempo
          setTimeout(() => {
            isScrolling = false;
          }, 600);
        }
      }
    }, {passive: true});
  }

  // Ejecutar al cargar la página
  document.addEventListener('DOMContentLoaded', initializeNavigation);
  
  // También ejecutar después de un breve retraso para asegurar que funcione en todos los casos
  setTimeout(initializeNavigation, 500);

  // Manejar la navegación por click
  document.querySelectorAll('.nav-menu a, a[href^="#"]').forEach(link => {
    link.addEventListener('click', (e) => {
      e.preventDefault();
      const targetId = link.getAttribute('href') || '';
      const targetSection = document.querySelector(targetId);
      
      if (targetSection) {
        const index = Array.from(sections).indexOf(targetSection);
        currentSectionIndex = index;
        scrollToSection(index);
      }
    });
  });

  function scrollToSection(index) {
    if (index >= 0 && index < sections.length) {
      isScrolling = true;
      currentSectionIndex = index;
      
      const targetSection = sections[index];
      const targetPosition = targetSection.offsetTop;
      
      if (isMobile) {
        // En móviles, usar scroll directo para mayor compatibilidad
        window.scrollTo(0, targetPosition);
      } else {
        // En desktop, usar comportamiento suave
        window.scrollTo({
          top: targetPosition,
          behavior: 'smooth'
        });
      }
      
      setTimeout(() => {
        isScrolling = false;
      }, 600);
    }
  }

  // Eventos de rueda para escritorio
  window.addEventListener('wheel', (e) => {
    // Limitar la frecuencia de eventos
    const now = Date.now();
    if (now - lastScrollTime < 500) return;
    lastScrollTime = now;
    
    if (!isScrolling) {
      const nextIndex = e.deltaY > 0 ? currentSectionIndex + 1 : currentSectionIndex - 1;
      
      if (nextIndex >= 0 && nextIndex < sections.length) {
        e.preventDefault();
        scrollToSection(nextIndex);
      }
    }
  }, { passive: false });

  // Actualizar sección actual
  function updateCurrentSection() {
    const scrollPosition = window.scrollY + (window.innerHeight / 3);
    
    for (let i = 0; i < sections.length; i++) {
      const section = sections[i];
      const sectionTop = section.offsetTop;
      const sectionBottom = sectionTop + section.offsetHeight;
      
      if (scrollPosition >= sectionTop && scrollPosition < sectionBottom) {
        currentSectionIndex = i;
        break;
      }
    }
  }

  // Actualizar cuando cambia el tamaño de la ventana
  window.addEventListener('resize', () => {
    const wasMobile = isMobile;
    isMobile = window.innerWidth <= 768;
    
    // Si cambió el estado de móvil, recargar la página
    if (wasMobile !== isMobile) {
      window.location.reload();
    }
  });

  window.addEventListener('load', updateCurrentSection);
  window.addEventListener('scroll', () => {
    if (!isScrolling) {
      updateCurrentSection();
    }
  });

  // Observer para el efecto sticky
  const observerOptions = {
    threshold: 0.1
  };

  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (!nav) return;
      if (!entry.isIntersecting && entry.boundingClientRect.top < 0) {
        nav.classList.add('sticky');
        nav.classList.add('visible');
      } else {
        nav.classList.remove('sticky');
        nav.classList.remove('visible');
      }
    });
  }, observerOptions);

  const firstSection = document.querySelector('#inicio');
  if (firstSection) {
    observer.observe(firstSection);
  }
</script>

<style>
  .nav-menu {
    position: fixed;
    left: 0;
    right: 0;
    z-index: 1000;
    padding: 1rem;
    transition: all 0.3s ease;
    opacity: 0;
    pointer-events: none;
    transform: translateY(-20px);
  }

  .nav-menu.visible {
    opacity: 1;
    pointer-events: auto; /* Cambiado de 'all' a 'auto' para mejor compatibilidad */
    transform: translateY(0);
  }

  .nav-menu.sticky {
    position: fixed;
    top: 0;
    background-color: rgba(255, 255, 255, 0.1);
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    backdrop-filter: blur(5px);
  }

  .nav-menu.sticky.white-bg {
    background-color: rgba(255, 255, 255, 0.1);
  }

  ul {
    display: flex;
    justify-content: center;
    gap: 3rem;
    list-style: none;
  }

  a {
    color: var(--text-color);
    text-decoration: none;
    font-size: 1.1rem;
    font-family: 'Lato', sans-serif;
    transition: color 0.3s ease;
    position: relative;
  }

  a::after {
    content: '';
    position: absolute;
    bottom: -5px;
    left: 0;
    width: 0;
    height: 2px;
    background-color: var(--primary-color);
    transition: width 0.3s ease;
  }

  a:hover {
    color: var(--secondary-color);
  }

  a:hover::after {
    width: 100%;
  }

  .sticky a {
    font-size: 1rem;
  }

  @media (max-width: 768px) {
    ul {
      gap: 1.5rem;
    }

    a {
      font-size: 1rem;
    }
  }
</style>